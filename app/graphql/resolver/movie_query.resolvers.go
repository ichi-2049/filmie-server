package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"

	graph "github.com/ichi-2049/filmie-server/graphql"
	gqlmodel "github.com/ichi-2049/filmie-server/graphql/models"
)

// Movies is the resolver for the movies field.
func (r *queryResolver) Movies(ctx context.Context) ([]*gqlmodel.Movie, error) {
	movies, err := r.container.GetMovieService().GetAllMovies()
	if err != nil {
		return nil, err
	}

	graphqlMovies := make([]*gqlmodel.Movie, len(movies))
	for i, movie := range movies {
		graphqlMovies[i] = &gqlmodel.Movie{
			MovieID:          movie.MovieID,
			Title:            movie.Title,
			Overview:         movie.Overview,
			ReleaseDate:      movie.ReleaseDate,
			ImageURL:         movie.TMDBImageURL,
			Popularity:       float64(movie.Popularity),
			OriginalLanguage: movie.OriginalLanguage,
			VoteAverage:      float64(movie.VoteAverage),
			VoteCount:        int(movie.VoteCount),
		}
	}

	return graphqlMovies, nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
