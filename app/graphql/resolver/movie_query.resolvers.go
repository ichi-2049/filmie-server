package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"

	graph "github.com/ichi-2049/filmie-server/graphql"
	gqlmodel "github.com/ichi-2049/filmie-server/graphql/models"
	domain "github.com/ichi-2049/filmie-server/internal/domain/models"
)

// Movies is the resolver for the movies field.
func (r *queryResolver) Movies(ctx context.Context, input *gqlmodel.MovieConnectionInput) (*gqlmodel.MovieConnection, error) {
	movieConnection, err := r.container.GetMovieService().GetMovieConnection(*input.First, input.After)
	if err != nil {
		return nil, err
	}

	return convertMovieConnection(movieConnection), nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

func convertMovieConnection(movieConnection *domain.MovieConnection) *gqlmodel.MovieConnection {
	if movieConnection == nil {
		return nil
	}

	edges := make([]*gqlmodel.MovieEdge, len(movieConnection.Edges))
	for i, e := range movieConnection.Edges {
		edges[i] = &gqlmodel.MovieEdge{
			Cursor: e.Cursor,
			Node: &gqlmodel.Movie{
				MovieID:          e.Node.MovieID,
				Title:            e.Node.Title,
				Overview:         e.Node.Overview,
				ReleaseDate:      e.Node.ReleaseDate,
				ImageURL:         e.Node.TMDBImageURL,
				Popularity:       float64(e.Node.Popularity),
				OriginalLanguage: e.Node.OriginalLanguage,
				VoteAverage:      float64(e.Node.VoteAverage),
				VoteCount:        int(e.Node.VoteCount),
			},
		}
	}

	var endCursor *string
	if movieConnection.PageInfo != nil && movieConnection.PageInfo.EndCursor != nil {
		endCursor = movieConnection.PageInfo.EndCursor
	}

	return &gqlmodel.MovieConnection{
		Edges: edges,
		PageInfo: &gqlmodel.PageInfo{
			HasNextPage: movieConnection.PageInfo != nil && movieConnection.PageInfo.HasNextPage,
			EndCursor:   endCursor,
		},
		TotalCount: int(movieConnection.TotalCount),
	}
}
